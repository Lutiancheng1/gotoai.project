# 构建阶段
FROM node:18-alpine as builder

WORKDIR /app

# 安装构建依赖
RUN apk add --no-cache python3 make g++

# 复制 package.json 和 package-lock.json
COPY package*.json ./

# 安装所有依赖
RUN npm ci

# 复制源代码和配置文件
COPY . .

# 构建应用
RUN npm run build

# 生产阶段
FROM node:18-alpine

# 安装生产环境必需的包
RUN apk add --no-cache tini

WORKDIR /app

# 复制 package.json 和 package-lock.json
COPY package*.json ./
COPY tsconfig.json ./

# 只安装生产依赖
RUN npm ci --only=production && \
    npm cache clean --force && \
    npm install module-alias tsconfig-paths

# 从构建阶段复制编译后的代码
COPY --from=builder /app/dist ./dist

# 创建日志目录并设置权限
RUN mkdir -p logs && \
    chown -R node:node /app

# 创建非 root 用户
USER node

# 设置环境变量
ENV NODE_ENV=production
ENV TS_NODE_BASEURL=/app/dist
ENV NODE_PATH=/app/dist

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:${API_PORT:-3333}/api/health || exit 1

# 使用 tini 作为入口点
ENTRYPOINT ["/sbin/tini", "--"]

# 启动应用并输出详细日志
CMD ["sh", "-c", "echo 'Starting application...' && printenv > /app/logs/env.log && echo 'Environment variables saved.' && ls -la /app/dist && echo 'Starting node...' && node -r module-alias/register -r tsconfig-paths/register dist/app.js 2>&1 | tee -a /app/logs/app.log"]