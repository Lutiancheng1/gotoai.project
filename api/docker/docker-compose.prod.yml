services:
  api:
    build:
      context: ..
      dockerfile: Dockerfile.prod
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      - MONGODB_HOST=mongo
      - MONGODB_PORT=${MONGODB_PORT}
      - MONGODB_DATABASE=${MONGODB_DATABASE}
      - MONGODB_USERNAME=${MONGODB_USERNAME}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - NODE_ENV=${NODE_ENV}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - API_PORT=${API_PORT}
    volumes:
      - api_logs:/app/logs
    restart: unless-stopped
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  mongo:
    container_name: ai-chat-mongo-prod
    image: mongo:6
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE}
      MONGODB_LOG_VERBOSITY: "0"
    command: mongod --quiet --logpath /dev/null
    volumes:
      - mongo_data_prod:/data/db
    restart: unless-stopped
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    container_name: ai-chat-redis-prod
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --loglevel warning
    volumes:
      - redis_data_prod:/data
    restart: unless-stopped
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: redis-cli ping
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  mongo_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  api_logs:
    driver: local

networks:
  app-network-prod:
    driver: bridge